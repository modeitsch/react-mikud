{"ast":null,"code":"import _slicedToArray from \"/Users/moshedeitsch/Desktop/stuff/react/react-mikud/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/moshedeitsch/Desktop/stuff/react/react-mikud/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './index.css';\n\nconst App = () => {\n  const _useState = useState(getInitialMode()),\n        _useState2 = _slicedToArray(_useState, 2),\n        darkMode = _useState2[0],\n        setDarkMode = _useState2[1];\n\n  useEffect(() => {\n    localStorage.setItem('dark', JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  function getInitialMode() {\n    const isReturningUser = \"dark\" in localStorage;\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n    const userPrefersDark = getPrefColorScheme(); // if mode was saved --> dark / light\n\n    if (isReturningUser) {\n      return savedMode; // if preferred color scheme is dark --> dark\n    } else if (userPrefersDark) {\n      return true; // otherwise --> light\n    } else {\n      return false;\n    } // return savedMode || false;\n\n  }\n\n  function getPrefColorScheme() {\n    if (!window.matchMedia) return;\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  }\n\n  return React.createElement(\"div\", {\n    className: darkMode ? \"dark-mode\" : \"light-mode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/moshedeitsch/Desktop/stuff/react/react-mikud/src/App.js"],"names":["React","useState","useEffect","App","getInitialMode","darkMode","setDarkMode","localStorage","setItem","JSON","stringify","isReturningUser","savedMode","parse","getItem","userPrefersDark","getPrefColorScheme","window","matchMedia","matches"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAO,aAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBAEgBF,QAAQ,CAACG,cAAc,EAAf,CAFxB;AAAA;AAAA,QAETC,QAFS;AAAA,QAECC,WAFD;;AAKhBJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAA7B;AACD,GAFQ,EAEP,CAACA,QAAD,CAFO,CAAT;;AAIA,WAASD,cAAT,GAA0B;AACxB,UAAMO,eAAe,GAAG,UAAUJ,YAAlC;AACA,UAAMK,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CAAlB;AACA,UAAMC,eAAe,GAAGC,kBAAkB,EAA1C,CAHwB,CAIxB;;AACA,QAAIL,eAAJ,EAAqB;AACnB,aAAOC,SAAP,CADmB,CAEnB;AACD,KAHD,MAGO,IAAIG,eAAJ,EAAqB;AAC1B,aAAO,IAAP,CAD0B,CAE1B;AACD,KAHM,MAGA;AACL,aAAO,KAAP;AACD,KAbuB,CAcxB;;AACD;;AAGD,WAASC,kBAAT,GAA8B;AAC5B,QAAI,CAACC,MAAM,CAACC,UAAZ,EAAwB;AAExB,WAAOD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAAzD;AACD;;AAGD,SACE;AAAK,IAAA,SAAS,EAAEd,QAAQ,GAAG,WAAH,GAAiB,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CAvCD;;AAyCA,eAAeF,GAAf","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport './index.css'\n\nconst App = () => {\n\n  const [darkMode, setDarkMode] = useState(getInitialMode())\n  \n\n  useEffect(() => {\n    localStorage.setItem('dark', JSON.stringify(darkMode))\n  },[darkMode])\n\n  function getInitialMode() {\n    const isReturningUser = \"dark\" in localStorage;\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n    const userPrefersDark = getPrefColorScheme();\n    // if mode was saved --> dark / light\n    if (isReturningUser) {\n      return savedMode;\n      // if preferred color scheme is dark --> dark\n    } else if (userPrefersDark) {\n      return true;\n      // otherwise --> light\n    } else {\n      return false;\n    }\n    // return savedMode || false;\n  }\n\n\n  function getPrefColorScheme() {\n    if (!window.matchMedia) return;\n\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  }\n\n\n  return (\n    <div className={darkMode ? \"dark-mode\" : \"light-mode\"}>\n   \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}