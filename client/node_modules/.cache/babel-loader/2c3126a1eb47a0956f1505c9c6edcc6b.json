{"ast":null,"code":"import _slicedToArray from \"/Users/moshedeitsch/Desktop/stuff/react/react-mikud/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { createContext, useState, useEffect } from 'react';\nconst DarkModeContext = createContext(darkMode, setDarkMode);\n\nconst _useState = useState(getInitialMode()),\n      _useState2 = _slicedToArray(_useState, 2),\n      darkMode = _useState2[0],\n      setDarkMode = _useState2[1];\n\nuseEffect(() => {\n  localStorage.setItem('dark', JSON.stringify(darkMode));\n}, [darkMode]);\n\nfunction getInitialMode() {\n  const isReturningUser = \"dark\" in localStorage;\n  const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n  const userPrefersDark = getPrefColorScheme(); // if mode was saved --> dark / light\n\n  if (isReturningUser) {\n    return savedMode; // if preferred color scheme is dark --> dark\n  } else if (userPrefersDark) {\n    return true; // otherwise --> light\n  } else {\n    return false;\n  } // return savedMode || false;\n\n}\n\nfunction getPrefColorScheme() {\n  if (!window.matchMedia) return;\n  return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\n\nexport const DarkModeProvider = DarkModeContext.Provider;\nexport const DarkModeConsumer = DarkModeContext.Consumer;\nexport default DarkModeContext;","map":{"version":3,"sources":["/Users/moshedeitsch/Desktop/stuff/react/react-mikud/src/context/DarkModeContext.js"],"names":["React","createContext","useState","useEffect","DarkModeContext","darkMode","setDarkMode","getInitialMode","localStorage","setItem","JSON","stringify","isReturningUser","savedMode","parse","getItem","userPrefersDark","getPrefColorScheme","window","matchMedia","matches","DarkModeProvider","Provider","DarkModeConsumer","Consumer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AAIA,MAAMC,eAAe,GAAGH,aAAa,CAACI,QAAD,EAAUC,WAAV,CAArC;;kBAEgCJ,QAAQ,CAACK,cAAc,EAAf,C;;MAAjCF,Q;MAAUC,W;;AAGjBH,SAAS,CAAC,MAAM;AACZK,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAA7B;AACH,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;;AAIA,SAASE,cAAT,GAA0B;AACtB,QAAMK,eAAe,GAAG,UAAUJ,YAAlC;AACA,QAAMK,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CAAlB;AACA,QAAMC,eAAe,GAAGC,kBAAkB,EAA1C,CAHsB,CAItB;;AACA,MAAIL,eAAJ,EAAqB;AACjB,WAAOC,SAAP,CADiB,CAEjB;AACH,GAHD,MAGO,IAAIG,eAAJ,EAAqB;AACxB,WAAO,IAAP,CADwB,CAExB;AACH,GAHM,MAGA;AACH,WAAO,KAAP;AACH,GAbqB,CActB;;AACH;;AAGD,SAASC,kBAAT,GAA8B;AAC1B,MAAI,CAACC,MAAM,CAACC,UAAZ,EAAwB;AAExB,SAAOD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAAzD;AACH;;AAKD,OAAO,MAAMC,gBAAgB,GAAGjB,eAAe,CAACkB,QAAzC;AACP,OAAO,MAAMC,gBAAgB,GAAGnB,eAAe,CAACoB,QAAzC;AAIP,eAAepB,eAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\n\n\n\nconst DarkModeContext = createContext(darkMode,setDarkMode)\n\nconst [darkMode, setDarkMode] = useState(getInitialMode())\n\n\nuseEffect(() => {\n    localStorage.setItem('dark', JSON.stringify(darkMode))\n}, [darkMode])\n\nfunction getInitialMode() {\n    const isReturningUser = \"dark\" in localStorage;\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n    const userPrefersDark = getPrefColorScheme();\n    // if mode was saved --> dark / light\n    if (isReturningUser) {\n        return savedMode;\n        // if preferred color scheme is dark --> dark\n    } else if (userPrefersDark) {\n        return true;\n        // otherwise --> light\n    } else {\n        return false;\n    }\n    // return savedMode || false;\n}\n\n\nfunction getPrefColorScheme() {\n    if (!window.matchMedia) return;\n\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\n\n\n\n\nexport const DarkModeProvider = DarkModeContext.Provider\nexport const DarkModeConsumer = DarkModeContext.Consumer\n\n\n\nexport default DarkModeContext"]},"metadata":{},"sourceType":"module"}