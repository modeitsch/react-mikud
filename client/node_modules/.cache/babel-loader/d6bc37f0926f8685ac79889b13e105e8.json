{"ast":null,"code":"import _slicedToArray from \"/Users/moshedeitsch/Desktop/stuff/react/react-mikud/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/moshedeitsch/Desktop/stuff/react/react-mikud/client/src/context/DarkModeContext.js\";\nimport React from 'react';\nexport const DarkModeContext = React.createContext();\n\nconst DarkModeProvider = props => {\n  const _React$useState = React.useState(getInitialMode),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        darkMode = _React$useState2[0],\n        setDarkMode = _React$useState2[1];\n\n  React.useEffect(() => {\n    localStorage.setItem('dark', JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  const getInitialMode = () => {\n    const isReturningUser = \"dark\" in localStorage;\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n    const userPrefersDark = getPrefColorScheme(); // if mode was saved --> dark / light\n\n    if (isReturningUser) {\n      return savedMode; // if preferred color scheme is dark --> dark\n    } else if (userPrefersDark) {\n      return true; // otherwise --> light\n    } else {\n      return false;\n    } // return savedMode || false;\n\n  };\n\n  const getPrefColorScheme = () => {\n    if (!window.matchMedia) return;\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  };\n\n  return React.createElement(DarkModeContext.Provider, {\n    value: {\n      darkMode,\n      setDarkMode\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default DarkModeProvider;","map":{"version":3,"sources":["/Users/moshedeitsch/Desktop/stuff/react/react-mikud/client/src/context/DarkModeContext.js"],"names":["React","DarkModeContext","createContext","DarkModeProvider","props","useState","getInitialMode","darkMode","setDarkMode","useEffect","localStorage","setItem","JSON","stringify","isReturningUser","savedMode","parse","getItem","userPrefersDark","getPrefColorScheme","window","matchMedia","matches","children"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,eAAe,GAAGD,KAAK,CAACE,aAAN,EAAxB;;AAIP,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA,0BACAJ,KAAK,CAACK,QAAN,CAAeC,cAAf,CADA;AAAA;AAAA,QACzBC,QADyB;AAAA,QACfC,WADe;;AAIhCR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AAClBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAA7B;AACH,GAFD,EAEG,CAACA,QAAD,CAFH;;AAIA,QAAMD,cAAc,GAAG,MAAM;AACzB,UAAMQ,eAAe,GAAG,UAAUJ,YAAlC;AACA,UAAMK,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CAAlB;AACA,UAAMC,eAAe,GAAGC,kBAAkB,EAA1C,CAHyB,CAIzB;;AACA,QAAIL,eAAJ,EAAqB;AACjB,aAAOC,SAAP,CADiB,CAEjB;AACH,KAHD,MAGO,IAAIG,eAAJ,EAAqB;AACxB,aAAO,IAAP,CADwB,CAExB;AACH,KAHM,MAGA;AACH,aAAO,KAAP;AACH,KAbwB,CAczB;;AACH,GAfD;;AAkBA,QAAMC,kBAAkB,GAAG,MAAM;AAC7B,QAAI,CAACC,MAAM,CAACC,UAAZ,EAAwB;AAExB,WAAOD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAAzD;AACH,GAJD;;AAMC,SACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAACf,MAAAA,QAAD;AAAUC,MAAAA;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMJ,KAAK,CAACmB,QADZ,CADJ;AAMH,CAtCF;;AAwCC,eAAepB,gBAAf","sourcesContent":["import React from 'react'\n\nexport const DarkModeContext = React.createContext()\n\n\n\nconst DarkModeProvider = (props) => {\n    const [darkMode, setDarkMode] = React.useState(getInitialMode)\n\n\n    React.useEffect(() => {\n        localStorage.setItem('dark', JSON.stringify(darkMode))\n    }, [darkMode])\n    \n    const getInitialMode = () => {\n        const isReturningUser = \"dark\" in localStorage;\n        const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n        const userPrefersDark = getPrefColorScheme();\n        // if mode was saved --> dark / light\n        if (isReturningUser) {\n            return savedMode;\n            // if preferred color scheme is dark --> dark\n        } else if (userPrefersDark) {\n            return true;\n            // otherwise --> light\n        } else {\n            return false;\n        }\n        // return savedMode || false;\n    }\n    \n    \n    const getPrefColorScheme = () => {\n        if (!window.matchMedia) return;\n    \n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    }\n    \n     return (\n         <DarkModeContext.Provider value={{darkMode,setDarkMode}} >\n             { props.children }\n         </DarkModeContext.Provider>\n     )\n \n }\n \n export default DarkModeProvider\n"]},"metadata":{},"sourceType":"module"}