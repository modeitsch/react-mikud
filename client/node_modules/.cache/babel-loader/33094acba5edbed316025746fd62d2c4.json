{"ast":null,"code":"import _slicedToArray from \"/Users/moshedeitsch/Desktop/stuff/react/react-mikud/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/moshedeitsch/Desktop/stuff/react/react-mikud/client/src/components/Result.js\";\nimport React, { useContext, useRef, useState } from 'react';\nimport '../style/../style/result.css';\nimport { FormContext } from '../context/FormContext';\n\nconst Result = props => {\n  const context = useContext(FormContext);\n  const loading = context.mikud.loading;\n  const zipCode = context.mikud.mikud.data;\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        copySuccess = _useState2[0],\n        setCopySuccess = _useState2[1];\n\n  const textAreaRef = useRef(zipCode);\n\n  function copyToClipboard(e) {\n    textAreaRef.current.select();\n    document.execCommand('copy'); // This is just personal preference.\n    // I prefer to not show the the whole text area selected.\n\n    e.target.focus();\n    setCopySuccess('Copied!');\n  }\n\n  ;\n  return React.createElement(\"div\", {\n    className: \"result\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, loading ? React.createElement(\"div\", {\n    className: \"loader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })) : loading, zipCode ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"\\u05D4\\u05DE\\u05D9\\u05E7\\u05D5\\u05D3 \\u05DC\\u05DB\\u05EA\\u05D5\\u05D1\\u05EA \\u05D4\\u05D9\\u05E0\\u05D5: \", zipCode)) : \" \", React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: copyToClipboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Copy\"), copySuccess));\n};\n\nexport default Result;","map":{"version":3,"sources":["/Users/moshedeitsch/Desktop/stuff/react/react-mikud/client/src/components/Result.js"],"names":["React","useContext","useRef","useState","FormContext","Result","props","context","loading","mikud","zipCode","data","copySuccess","setCopySuccess","textAreaRef","copyToClipboard","e","current","select","document","execCommand","target","focus"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAAyBC,MAAzB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,OAAO,8BAAP;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,OAAO,GAAGN,UAAU,CAACG,WAAD,CAA1B;AAEA,QAAMI,OAAO,GAAGD,OAAO,CAACE,KAAR,CAAcD,OAA9B;AACA,QAAME,OAAO,GAAGH,OAAO,CAACE,KAAR,CAAcA,KAAd,CAAoBE,IAApC;;AAJsB,oBAMgBR,QAAQ,CAAC,EAAD,CANxB;AAAA;AAAA,QAMfS,WANe;AAAA,QAMFC,cANE;;AAOtB,QAAMC,WAAW,GAAGZ,MAAM,CAACQ,OAAD,CAA1B;;AAEA,WAASK,eAAT,CAAyBC,CAAzB,EAA4B;AAC1BF,IAAAA,WAAW,CAACG,OAAZ,CAAoBC,MAApB;AACAC,IAAAA,QAAQ,CAACC,WAAT,CAAqB,MAArB,EAF0B,CAG1B;AACA;;AACAJ,IAAAA,CAAC,CAACK,MAAF,CAASC,KAAT;AACAT,IAAAA,cAAc,CAAC,SAAD,CAAd;AACD;;AAAA;AAED,SACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,OAAO,GAAG;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,CAAH,GAA0DA,OADtE,EAGKE,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GAA2BA,OAA3B,CAAL,CAAH,GAA2D,GAHvE,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAQ,IAAA,OAAO,EAAEK,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAECH,WAFD,CANJ,CADJ;AAaH,CA/BD;;AAiCA,eAAeP,MAAf","sourcesContent":["import React,{useContext,useRef,useState} from 'react'\nimport '../style/../style/result.css'\nimport { FormContext } from '../context/FormContext'\n\nconst Result = (props) => {\n    const context = useContext(FormContext);\n\n    const loading = context.mikud.loading\n    const zipCode = context.mikud.mikud.data  \n\n    const [copySuccess, setCopySuccess] = useState('');\n    const textAreaRef = useRef(zipCode);\n  \n    function copyToClipboard(e) {\n      textAreaRef.current.select();\n      document.execCommand('copy');\n      // This is just personal preference.\n      // I prefer to not show the the whole text area selected.\n      e.target.focus();\n      setCopySuccess('Copied!');\n    };\n\n    return ( \n        <div className='result'>\n            {loading ? <div className=\"loader\"><div></div><div></div></div> : loading }\n            \n            {zipCode ? <div><span>המיקוד לכתובת הינו: {zipCode}</span></div> : \" \" }\n\n\n            <div>\n            <button onClick={copyToClipboard}>Copy</button> \n            {copySuccess}\n              </div>\n        </div>\n     );\n}\n \nexport default Result; "]},"metadata":{},"sourceType":"module"}